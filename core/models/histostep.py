import random

import numpy as np


def _sample_from_histogram(hist, bins, num=1, return_probas=False):
    """
    A function to sample data from a given histogram generated by numpy for example.
    :param hist: histogram returned by numpy
    :param bins: bins returned by numpy
    :param num: number of values to sample
    :return: sampled values
    """
    bin_midpoints = bins[:-1] + np.diff(bins) / 2
    cdf = np.cumsum(hist)
    cdf = cdf / cdf[-1]
    # if cdf[-1] != 1:
    #     print(hist)
    #     print(bins)
    #     print(cdf)
    #     print('CDF does not sum to 1')
    values = np.random.rand(num)
    value_bins = np.searchsorted(cdf, values)
    random_from_cdf = bin_midpoints[value_bins]
    # Get likelihood of this value being sampled
    probability = hist[value_bins] / np.sum(hist)
    # print(hist)
    # print(bins)
    if return_probas:
        return random_from_cdf, probability
    else:
        return random_from_cdf


###############################
# Bin Based Simulation
###############################

def _simulate_bin(bin_follicles, dict_histo_matrix, dayx, dayy, bin_key, predict_using_perc_growth, n_sim, mean_lag=1,
                  return_probas=True):
    new_follicles = []
    for follicle in bin_follicles:
        num = random.random()
        new_follicle = follicle

        if str(dayx) not in dict_histo_matrix.keys():
            # for now follicle does not grow
            # print('Day {} not in histo matrix'.format(dayx))
            new_follicles.append(new_follicle + 1.7)
            continue
        if str(dayy) not in dict_histo_matrix[str(dayx)][bin_key].keys():
            # print('Day {} not in histo matrix'.format(dayy))
            new_follicles.append(new_follicle + 1.7)
            continue
        chance_growth = np.median(
            _sample_from_histogram(dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_number_grew'][0],
                                   dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_number_grew'][1],
                                   n_sim))

        if num < chance_growth:
            if predict_using_perc_growth:
                increase = np.median(
                    _sample_from_histogram(dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_perc_growth'][0],
                                           dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_perc_growth'][1],
                                           n_sim,
                                           return_probas=return_probas))
                new_follicle = follicle * increase * mean_lag
            else:
                if return_probas:
                    try:
                        increase, proba = _sample_from_histogram(
                            dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_amounts_grew'][0],
                            dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_amounts_grew'][1],
                            n_sim,
                            return_probas=return_probas)
                    except:
                        print('Dayx: ' + str(dayx))
                        print('Dayy: ' + str(dayy))
                        print('Bin_key: ' + str(bin_key))

                    increase = np.median(increase)
                    # print('Increase: ' + str(increase))
                    # print('Proba: ' + str(proba))
                    # print('dayx: ' + str(dayx))
                    # print('dayy: ' + str(dayy))
                    # print('bin_key: ' + str(bin_key))
                    # print('------------------')
                else:
                    try:
                        increase = np.median(
                            _sample_from_histogram(dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_amounts_grew'][0],
                                                   dict_histo_matrix[str(dayx)][bin_key][str(dayy)]['hist_amounts_grew'][1],
                                                   n_sim))
                    except:
                        print('Dayx: ' + str(dayx))
                        print('Dayy: ' + str(dayy))
                        print('Bin_key: ' + str(bin_key))

                new_follicle = follicle + (increase * mean_lag)

        new_follicles.append(new_follicle)
    return new_follicles


def _simulate_follicles_bin_based(day, dayy, dict_histo_matrix, predict_using_perc_growth, profile, n_sim=1,
                                  mean_lag=1, pred_on_actual_data=True, return_probas=False):
    # Simulate bins for profile
    simulated_follicles = []
    for bin_key in profile.bins.keys():

        new_follicles = _simulate_bin(profile.bins[bin_key].follicles, dict_histo_matrix, day, dayy, bin_key,
                                      predict_using_perc_growth, n_sim, mean_lag, return_probas=return_probas)

        simulated_follicles.extend(new_follicles)
    simulated_follicles.sort()
    return simulated_follicles


###############################
# Follicle Based Simulation
###############################

def _simulate_follicle(follicle, growth_dict, n_sim=1, drug_dosage=0, use_drug_dosage=False, mean_lag=1,
                       return_probas=False):
    num = random.random()
    new_follicle = follicle

    dosages_per_weight_bins = {'<1.5': 1.5, '1.5-1.75': 1.75, '1.75-2': 2, '2-2.25': 2.25, '2.25-2.5': 2.5,
                               '2.5-3.5': 3.5, '3.5-5': 5, '5-7.5': 7.5, '7.5-10': 10}

    if use_drug_dosage:
        try:
            chance_growth = None
            drug_dosage = float(drug_dosage)
            # print(drug_dosage)
            for dosage_bin in dosages_per_weight_bins:

                if drug_dosage <= dosages_per_weight_bins[dosage_bin]:
                    chance_growth = growth_dict[round(follicle)]['chance_of_growth_per_dosage'][dosage_bin]['chance_of_growth']
                    break
            if chance_growth is None:
                # Fall back to no drug dosage
                chance_growth = growth_dict[round(follicle)]['chance_of_growth']
        except:
            # Fall back to no drug dosage
            chance_growth = growth_dict[round(follicle)]['chance_of_growth']

    else:
        # If we are not using drug dosage, fall back to average chance of growth
        if round(follicle) in growth_dict.keys():
            chance_growth = growth_dict[round(follicle)]['chance_of_growth']
        else:
            # if follicle not in growth_dict.keys(): fall back to average chance of growth
            chances_growth = [growth_dict[x]['chance_of_growth'] for x in growth_dict.keys() if isinstance(x, int)]
            chance_growth = np.mean(chances_growth)

    if num < chance_growth:
        if follicle in growth_dict.keys():

            increase = np.median(
                _sample_from_histogram(growth_dict[round(follicle)]['hist_absolute_growth'][0],
                                       growth_dict[round(follicle)]['hist_absolute_growth'][1],
                                       n_sim))


            new_follicle = follicle + increase
            new_follicle = new_follicle * mean_lag
        else:
            increase = 1.7
            new_follicle = follicle + increase * mean_lag

    return new_follicle


def _simulate_follicles_follicle_based(follicles, growth_dict, n_sim=1, drug_dosage=0, use_drug_dosage=False,
                                       mean_lag=1,
                                       return_probas=False):
    # Simulate follicles for profile
    simulated_follicles = []
    for follicle in follicles:

        new_follicle = _simulate_follicle(follicle, growth_dict, n_sim, drug_dosage=drug_dosage,
                                          use_drug_dosage=use_drug_dosage, mean_lag=mean_lag,
                                          return_probas=return_probas)

        simulated_follicles.append(new_follicle)
    simulated_follicles.sort()
    return simulated_follicles
